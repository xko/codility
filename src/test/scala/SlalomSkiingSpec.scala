import org.scalatest.funspec.AnyFunSpec

import SlalomSkiing.Solution

class SlalomSkiingSpec extends AnyFunSpec {

  describe("performance"){
    describe("medium random") {
      it("#2") {
        val a = Array(18948, 479945, 396355, 51103, 635416, 57451, 59199, 62723, 106714, 803690, 126196, 595595, 539328, 143216, 144830,
          150288, 154277, 344739, 181607, 698864, 162660, 646251, 980215, 255561, 996823, 178654, 198724, 179690, 540534, 209142, 709011,
          893151, 215329, 241566, 270766, 279484, 809527, 303421, 326661, 347733, 414475, 436855, 945939, 462115, 479679, 919536, 375074,
          294384, 436486, 953334, 319522, 999924, 487984, 500149, 139923, 548625, 561044, 924643, 567366, 109292, 604197, 195361, 577002,
          583519, 596924, 986766, 606730, 630462, 205927, 174379, 385452, 641568, 659159, 674634, 627614, 167451, 414216, 704056, 641711,
          754806, 794135, 813130, 818565, 820088, 827565, 328824, 802092, 873095, 871320, 825016, 908666, 937232, 945922, 946167, 651397,
          988232, 33085, 709822, 943718, 9026, 937415, 657915, 815525, 777990, 769870, 221990, 615988, 589965, 807697, 523745, 175755,
          516742, 494236, 262509, 430945, 277071, 255759, 428346, 593797, 186914, 423893, 616819, 506831, 964192, 417533, 405435,
          400228, 399665, 343667, 319350, 292533, 882672, 239890, 212712, 192614, 167975, 548763, 171755, 135669, 680795, 139320, 123100,
          516441, 115400, 112333, 242859, 103479, 102915, 119230, 90911, 51355, 45854, 576363, 17084, 123798, 67325, 3723, 2485, 239966, 21029,
          38465, 238402, 56659, 58662, 136960, 144310, 186847, 200939, 219688, 284860, 448079, 266954, 244439, 260507, 70769, 285129, 332598,
          66733, 873075, 879204, 59831, 398000, 398528, 482384, 498007, 636768, 505743, 532972, 536084, 559096, 560949, 610373, 567136, 573832,
          866808, 846434, 16010, 593597, 624802, 924328, 633545, 823625, 655226, 764962, 83758, 661939, 694845, 700629, 933717, 101525, 998587,
          355238, 138782, 486189, 700834, 533586, 726497, 729843, 730565, 734966, 737632, 366777, 766854, 459771, 797434, 820728, 823923,
          477791, 859427, 863358, 875178, 651241, 892948, 879456, 885253, 868631, 886747, 55763, 898382, 957253, 957863, 171978, 257477,
          969595, 971402, 374613, 981617, 698644, 744665, 998874)
        val start = System.nanoTime()
        Solution.solution(a)
        assert((System.nanoTime() - start) / 1e9d < .5)
      }
    }

    describe("big random") {
      it("better than O(n^2)"){
        val r = scala.util.Random
        def time(n:Int) = {
          val a = Array.fill(n){r.nextInt(1000000000)}
          val start = System.nanoTime()
          Solution.solution(a)
          val t = System.nanoTime() - start
          println(s"$n  :${t/ 1e9d}")
          t
        }
        assert(time(300000).toDouble/time(100000)<9)
      }
    }
  }

  describe("correctness"){
    it("example"){
      val a=Array(15, 13, 5, 7, 4, 10, 12, 8, 2, 11, 6, 9, 3)
      assert(Solution.solution(a) == 8)
    }

    describe("simple") {
      it("#1") {
        val a = Array(1)
        assert(Solution.solution(a) == 1)
      }
      it("#2") {
        val a = Array(1, 999999999, 500000000, 2, 1000000000)
        assert(Solution.solution(a) == 5)
      }
      it("#3") {
        val a = Array(543, 123)
        assert(Solution.solution(a) == 2)
      }
    }

    describe("small random") {
      it("#1") {
        val a = Array(119,150,318,182,70,264,108,383,149,336,190,305,442,99,139,63,254,159,145,84,307,286,456,390,76,
          289,33,140,379,489,134,49,41,92,288,352,474,407,86,298,322,277,120,101,320,142,261,219,186,213)
        assert(Solution.solution(a) == 19)
      }
    }

    describe("meidium random") {
      it("#1") {
        val a = Array(123, 1388, 7815, 660, 105, 9600, 591, 4934, 337, 4767, 8537, 415, 7161, 6053, 244, 569, 8400, 4722, 1745, 6674,
          865, 1836, 7560, 2263, 2089, 7339, 2596, 1059, 5443, 7594, 3952, 1663, 6875, 3046, 1530, 7123, 6692, 6474,
          5935, 6376, 6130, 8369, 769, 4051, 2483, 4532, 7250, 7290, 1756, 9773, 6439, 158, 4037, 275, 2103, 2504, 1097, 2104, 7684, 3061,
          703, 7977, 7970, 6139, 4165, 8656, 9391, 1122, 5771, 3751, 2779, 4718, 1882, 5906, 9900, 1241, 7499, 8067, 8591, 8279, 2507, 1245,
          145, 2925, 7884, 3669, 9591, 7188, 2600, 3964, 9398, 4243, 6780, 8157, 336, 1688, 1431, 7337, 2062, 8217, 5511, 6148, 717, 4460, 5479, 7488, 6237,
          6843, 552, 7392, 2922, 4138, 9762, 1358, 1082, 5118, 5347, 8679, 4650, 4204, 5650, 3513, 5278, 2267, 830, 5211, 8571, 8447, 3847, 362, 4300, 4878,
          9944, 8517, 3758, 1462, 1568, 1732, 610, 5384, 4947, 7896, 1563, 537, 5912, 8171, 902, 6041, 9967, 6948, 1076, 3692, 3937, 4627, 2386, 1631, 1147, 4484,
          5690, 539, 7273, 7435, 3596, 4045, 5315, 8935, 7769, 5809, 9402, 2307, 4342, 4773, 1335, 1789, 3931, 1314, 8824, 7224, 2424, 5069, 8863, 1423, 6810, 114,
          2601, 1414, 4321, 2238, 3819, 87, 1683, 4938, 7665, 9275, 3904, 91, 6034, 2570, 942, 8575, 8917, 3167, 3987, 1016, 5984, 9824, 77, 3878, 6106, 566,
          3157, 4615, 581, 1402, 9662, 1018, 7817, 4786, 6094, 7924, 8760, 1160, 3881, 4272, 391, 1483, 3361, 314, 8840, 7986, 2519, 8058, 2066, 393,
          584, 1800, 7230, 4681, 1133, 2805, 6540, 9746, 8997, 6458, 7739, 3527, 1277, 3011, 332, 6877)
        assert(Solution.solution(a) ==50)
      }

    }

  }


}
